{"ast":null,"code":"import { fork, take, call, put } from 'redux-saga/effects';\nimport * as taskTypes from './../constants/task';\nimport { getList } from './../apis/task';\nimport { STATUS_CODE } from './../constants';\n\nfunction* watchFetchListTaskAction() {\n  yield take(taskTypes.FETCH_TASK);\n  const resp = yield call(getList);\n  const status = resp.status,\n        data = resp.data;\n\n  if (status === STATUS_CODE.SUCCESS) {\n    //dispatch action fetchListTaskSuccess\n    yield put(fetchListTaskSuccess(data));\n  } else {\n    //dispatch action fetchListTaskSuccess fail\n    yield put(fetchListTaskFailed(data));\n  }\n}\n\nfunction* watchCreateTaskAction() {\n  console.log('watch create task action');\n}\n\nfunction* rootSaga() {\n  yield fork(watchFetchListTaskAction);\n  yield fork(watchCreateTaskAction);\n}\n\nexport default rootSaga;","map":{"version":3,"sources":["C:\\Coder\\react-nghiepuit\\redux-saga\\redux-saga-material\\src\\sagas\\index.js"],"names":["fork","take","call","put","taskTypes","getList","STATUS_CODE","watchFetchListTaskAction","FETCH_TASK","resp","status","data","SUCCESS","fetchListTaskSuccess","fetchListTaskFailed","watchCreateTaskAction","console","log","rootSaga"],"mappings":"AAAA,SAASA,IAAT,EAAeC,IAAf,EAAqBC,IAArB,EAA2BC,GAA3B,QAAsC,oBAAtC;AACA,OAAO,KAAKC,SAAZ,MAA2B,qBAA3B;AACA,SAASC,OAAT,QAAwB,gBAAxB;AACA,SAASC,WAAT,QAA4B,gBAA5B;;AAEA,UAAUC,wBAAV,GAAqC;AACjC,QAAMN,IAAI,CAACG,SAAS,CAACI,UAAX,CAAV;AACA,QAAMC,IAAI,GAAI,MAAMP,IAAI,CAACG,OAAD,CAAxB;AAFiC,QAGzBK,MAHyB,GAGTD,IAHS,CAGzBC,MAHyB;AAAA,QAGjBC,IAHiB,GAGTF,IAHS,CAGjBE,IAHiB;;AAIjC,MAAGD,MAAM,KAAKJ,WAAW,CAACM,OAA1B,EAAmC;AACnC;AACA,UAAMT,GAAG,CAACU,oBAAoB,CAACF,IAAD,CAArB,CAAT;AACC,GAHD,MAGO;AACP;AACA,UAAMR,GAAG,CAACW,mBAAmB,CAACH,IAAD,CAApB,CAAT;AACC;AACJ;;AAED,UAAUI,qBAAV,GAAkC;AAC9BC,EAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACH;;AAED,UAAUC,QAAV,GAAqB;AACjB,QAAMlB,IAAI,CAACO,wBAAD,CAAV;AACA,QAAMP,IAAI,CAACe,qBAAD,CAAV;AACH;;AAED,eAAeG,QAAf","sourcesContent":["import { fork, take, call, put } from 'redux-saga/effects';\r\nimport * as taskTypes from './../constants/task';\r\nimport { getList } from './../apis/task';\r\nimport { STATUS_CODE } from './../constants';\r\n\r\nfunction* watchFetchListTaskAction() {\r\n    yield take(taskTypes.FETCH_TASK);\r\n    const resp  = yield call(getList);\r\n    const { status, data} = resp;\r\n    if(status === STATUS_CODE.SUCCESS) {\r\n    //dispatch action fetchListTaskSuccess\r\n    yield put(fetchListTaskSuccess(data))\r\n    } else {\r\n    //dispatch action fetchListTaskSuccess fail\r\n    yield put(fetchListTaskFailed(data))\r\n    }\r\n}\r\n\r\nfunction* watchCreateTaskAction() {\r\n    console.log('watch create task action')\r\n}\r\n\r\nfunction* rootSaga() {\r\n    yield fork(watchFetchListTaskAction);\r\n    yield fork(watchCreateTaskAction);\r\n}\r\n\r\nexport default rootSaga;"]},"metadata":{},"sourceType":"module"}