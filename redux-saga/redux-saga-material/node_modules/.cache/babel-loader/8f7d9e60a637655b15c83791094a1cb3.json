{"ast":null,"code":"var _jsxFileName = \"C:\\\\Coder\\\\react-nghiepuit\\\\redux-saga\\\\redux-saga-material\\\\src\\\\containers\\\\Taskboard\\\\index.js\";\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport AddIcon from '@material-ui/icons/Add';\nimport { withStyles } from '@material-ui/styles';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport TaskForm from '../../components/TaskForm';\nimport { STATUSES } from '../../constants';\nimport TaskList from '../../components/TaskList';\nimport { connect } from 'react-redux';\nimport styles from './styles';\nimport { bindActionCreators } from 'redux';\nimport * as taskActions from './../../actions/task';\nimport SearchBox from '../../components/SearchBox';\n\nclass TaskBoard extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      open: false\n    };\n\n    this.handleClose = () => {\n      this.setState({\n        open: false\n      });\n    };\n\n    this.openForm = () => {\n      this.setState({\n        open: true\n      });\n    };\n\n    this.loadData = () => {\n      const taskActionCreators = this.props.taskActionCreators;\n      const fetchListTask = taskActionCreators.fetchListTask;\n      fetchListTask();\n    };\n\n    this.handleFilter = e => {\n      console.log('e:', e);\n    };\n  }\n\n  renderBoard() {\n    const listTask = this.props.listTask;\n    let xhtml = null;\n    xhtml = React.createElement(Grid, {\n      container: true,\n      spacing: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, STATUSES.map(status => {\n      const taskFiltered = listTask.filter(task => task.status === status.value);\n      return React.createElement(TaskList, {\n        key: status.value,\n        tasks: taskFiltered,\n        status: status,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      });\n    }));\n    return xhtml;\n  }\n\n  renderForm() {\n    const open = this.state.open;\n    let xhtml = null;\n    xhtml = React.createElement(TaskForm, {\n      open: open,\n      onClose: this.handleClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    });\n    return xhtml;\n  }\n\n  renderSearchBox() {\n    let xhtml = null;\n    xhtml = React.createElement(SearchBox, {\n      handleChange: this.handleFilter,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    });\n    return xhtml;\n  }\n\n  render() {\n    const classes = this.props.classes;\n    return React.createElement(\"div\", {\n      className: classes.taskBoard,\n      id: \"1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      className: classes.button,\n      onClick: this.loadData,\n      style: {\n        marginRight: 20\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"Load Data\"), React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      className: classes.button,\n      onClick: this.openForm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(AddIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }), \" Th\\xEAm m\\u1EDBi c\\xF4ng vi\\u1EC7c\"), this.renderSearchBox(), this.renderBoard(), this.renderForm());\n  }\n\n}\n\nTaskBoard.propTypes = {\n  classes: PropTypes.object,\n  taskActionCreators: PropTypes.shape({\n    fetchListTask: PropTypes.func\n  }),\n  listTask: PropTypes.array\n};\n\nconst mapStateToProps = state => {\n  return {\n    listTask: state.task.listTask\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    taskActionCreators: bindActionCreators(taskActions, dispatch)\n  };\n};\n\nexport default withStyles(styles)(connect(mapStateToProps, mapDispatchToProps)(TaskBoard));","map":{"version":3,"sources":["C:\\Coder\\react-nghiepuit\\redux-saga\\redux-saga-material\\src\\containers\\Taskboard\\index.js"],"names":["Button","Grid","AddIcon","withStyles","PropTypes","React","Component","TaskForm","STATUSES","TaskList","connect","styles","bindActionCreators","taskActions","SearchBox","TaskBoard","state","open","handleClose","setState","openForm","loadData","taskActionCreators","props","fetchListTask","handleFilter","e","console","log","renderBoard","listTask","xhtml","map","status","taskFiltered","filter","task","value","renderForm","renderSearchBox","render","classes","taskBoard","button","marginRight","propTypes","object","shape","func","array","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,MAAP,MAAmB,0BAAnB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,OAAO,KAAKC,WAAZ,MAA6B,sBAA7B;AACA,OAAOC,SAAP,MAAsB,4BAAtB;;AAEA,MAAMC,SAAN,SAAwBT,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAC9BU,KAD8B,GACtB;AACJC,MAAAA,IAAI,EAAE;AADF,KADsB;;AAAA,SAW9BC,WAX8B,GAWhB,MAAM;AAChB,WAAKC,QAAL,CAAc;AACVF,QAAAA,IAAI,EAAE;AADI,OAAd;AAGH,KAf6B;;AAAA,SAiB9BG,QAjB8B,GAiBnB,MAAM;AACb,WAAKD,QAAL,CAAc;AACVF,QAAAA,IAAI,EAAE;AADI,OAAd;AAGH,KArB6B;;AAAA,SAoD9BI,QApD8B,GAoDnB,MAAM;AAAA,YACLC,kBADK,GACkB,KAAKC,KADvB,CACLD,kBADK;AAAA,YAELE,aAFK,GAEaF,kBAFb,CAELE,aAFK;AAGbA,MAAAA,aAAa;AAChB,KAxD6B;;AAAA,SA0D9BC,YA1D8B,GA0DfC,CAAC,IAAI;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBF,CAAlB;AACH,KA5D6B;AAAA;;AAuB9BG,EAAAA,WAAW,GAAG;AAAA,UACFC,QADE,GACW,KAAKP,KADhB,CACFO,QADE;AAEV,QAAIC,KAAK,GAAG,IAAZ;AACAA,IAAAA,KAAK,GACD,oBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,OAAO,EAAE,CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKvB,QAAQ,CAACwB,GAAT,CAAaC,MAAM,IAAI;AACpB,YAAMC,YAAY,GAAGJ,QAAQ,CAACK,MAAT,CACjBC,IAAI,IAAIA,IAAI,CAACH,MAAL,KAAgBA,MAAM,CAACI,KADd,CAArB;AAGA,aACI,oBAAC,QAAD;AACI,QAAA,GAAG,EAAEJ,MAAM,CAACI,KADhB;AAEI,QAAA,KAAK,EAAEH,YAFX;AAGI,QAAA,MAAM,EAAED,MAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAOH,KAXA,CADL,CADJ;AAgBA,WAAOF,KAAP;AACH;;AAEDO,EAAAA,UAAU,GAAG;AAAA,UACDrB,IADC,GACQ,KAAKD,KADb,CACDC,IADC;AAET,QAAIc,KAAK,GAAG,IAAZ;AACAA,IAAAA,KAAK,GAAG,oBAAC,QAAD;AAAU,MAAA,IAAI,EAAEd,IAAhB;AAAsB,MAAA,OAAO,EAAE,KAAKC,WAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAR;AACA,WAAOa,KAAP;AACH;;AAYDQ,EAAAA,eAAe,GAAG;AACd,QAAIR,KAAK,GAAG,IAAZ;AACAA,IAAAA,KAAK,GACD,oBAAC,SAAD;AAAW,MAAA,YAAY,EAAE,KAAKN,YAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAGA,WAAOM,KAAP;AACH;;AAEDS,EAAAA,MAAM,GAAG;AAAA,UACGC,OADH,GACe,KAAKlB,KADpB,CACGkB,OADH;AAEL,WACI;AAAK,MAAA,SAAS,EAAEA,OAAO,CAACC,SAAxB;AAAmC,MAAA,EAAE,EAAC,GAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AACI,MAAA,OAAO,EAAC,WADZ;AAEI,MAAA,KAAK,EAAC,SAFV;AAGI,MAAA,SAAS,EAAED,OAAO,CAACE,MAHvB;AAII,MAAA,OAAO,EAAE,KAAKtB,QAJlB;AAKI,MAAA,KAAK,EAAE;AACHuB,QAAAA,WAAW,EAAE;AADV,OALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,EAYI,oBAAC,MAAD;AACI,MAAA,OAAO,EAAC,WADZ;AAEI,MAAA,KAAK,EAAC,SAFV;AAGI,MAAA,SAAS,EAAEH,OAAO,CAACE,MAHvB;AAII,MAAA,OAAO,EAAE,KAAKvB,QAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANJ,wCAZJ,EAoBK,KAAKmB,eAAL,EApBL,EAqBK,KAAKV,WAAL,EArBL,EAsBK,KAAKS,UAAL,EAtBL,CADJ;AA0BH;;AAlG6B;;AAqGlCvB,SAAS,CAAC8B,SAAV,GAAsB;AAClBJ,EAAAA,OAAO,EAAErC,SAAS,CAAC0C,MADD;AAElBxB,EAAAA,kBAAkB,EAAElB,SAAS,CAAC2C,KAAV,CAAgB;AAChCvB,IAAAA,aAAa,EAAEpB,SAAS,CAAC4C;AADO,GAAhB,CAFF;AAKlBlB,EAAAA,QAAQ,EAAE1B,SAAS,CAAC6C;AALF,CAAtB;;AAQA,MAAMC,eAAe,GAAGlC,KAAK,IAAI;AAC7B,SAAO;AACHc,IAAAA,QAAQ,EAAEd,KAAK,CAACoB,IAAN,CAAWN;AADlB,GAAP;AAGH,CAJD;;AAKA,MAAMqB,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAO;AACH9B,IAAAA,kBAAkB,EAAEV,kBAAkB,CAACC,WAAD,EAAcuC,QAAd;AADnC,GAAP;AAGH,CAJD;;AAMA,eAAejD,UAAU,CAACQ,MAAD,CAAV,CACXD,OAAO,CACHwC,eADG,EAEHC,kBAFG,CAAP,CAGEpC,SAHF,CADW,CAAf","sourcesContent":["import Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport PropTypes from 'prop-types';\r\nimport React, { Component } from 'react';\r\nimport TaskForm from '../../components/TaskForm';\r\nimport { STATUSES } from '../../constants';\r\nimport TaskList from '../../components/TaskList';\r\nimport { connect } from 'react-redux';\r\nimport styles from './styles';\r\nimport { bindActionCreators } from 'redux';\r\nimport * as taskActions from './../../actions/task';\r\nimport SearchBox from '../../components/SearchBox'\r\n\r\nclass TaskBoard extends Component {\r\n    state = {\r\n        open: false,\r\n    };\r\n\r\n    // componentDidMount() {\r\n    //     const { taskActionCreators } = this.props;\r\n    //     const { fetchListTask } = taskActionCreators;\r\n    //     fetchListTask();\r\n    // }\r\n\r\n    handleClose = () => {\r\n        this.setState({\r\n            open: false,\r\n        });\r\n    };\r\n\r\n    openForm = () => {\r\n        this.setState({\r\n            open: true,\r\n        });\r\n    };\r\n\r\n    renderBoard() {\r\n        const { listTask } = this.props;\r\n        let xhtml = null;\r\n        xhtml = (\r\n            <Grid container spacing={2}>\r\n                {STATUSES.map(status => {\r\n                    const taskFiltered = listTask.filter(\r\n                        task => task.status === status.value,\r\n                    );\r\n                    return (\r\n                        <TaskList\r\n                            key={status.value}\r\n                            tasks={taskFiltered}\r\n                            status={status}\r\n                        />\r\n                    );\r\n                })}\r\n            </Grid>\r\n        );\r\n        return xhtml;\r\n    }\r\n\r\n    renderForm() {\r\n        const { open } = this.state;\r\n        let xhtml = null;\r\n        xhtml = <TaskForm open={open} onClose={this.handleClose} />;\r\n        return xhtml;\r\n    }\r\n\r\n    loadData = () => {\r\n        const { taskActionCreators } = this.props;\r\n        const { fetchListTask } = taskActionCreators;\r\n        fetchListTask();\r\n    };\r\n\r\n    handleFilter = e => {\r\n        console.log('e:', e)\r\n    }\r\n\r\n    renderSearchBox() {\r\n        let xhtml = null;\r\n        xhtml = (\r\n            <SearchBox handleChange={this.handleFilter}/>\r\n        )\r\n        return xhtml;\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        return (\r\n            <div className={classes.taskBoard} id=\"1\">\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.button}\r\n                    onClick={this.loadData}\r\n                    style={{\r\n                        marginRight: 20,\r\n                    }}\r\n                >\r\n                    Load Data\r\n                </Button>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.button}\r\n                    onClick={this.openForm}\r\n                >\r\n                    <AddIcon /> Thêm mới công việc\r\n                </Button>\r\n                {this.renderSearchBox()}\r\n                {this.renderBoard()}\r\n                {this.renderForm()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nTaskBoard.propTypes = {\r\n    classes: PropTypes.object,\r\n    taskActionCreators: PropTypes.shape({\r\n        fetchListTask: PropTypes.func,\r\n    }),\r\n    listTask: PropTypes.array,\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        listTask: state.task.listTask,\r\n    };\r\n};\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        taskActionCreators: bindActionCreators(taskActions, dispatch),\r\n    };\r\n};\r\n\r\nexport default withStyles(styles)(\r\n    connect(\r\n        mapStateToProps,\r\n        mapDispatchToProps,\r\n    )(TaskBoard),\r\n);\r\n"]},"metadata":{},"sourceType":"module"}