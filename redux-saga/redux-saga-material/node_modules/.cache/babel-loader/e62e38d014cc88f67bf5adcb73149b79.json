{"ast":null,"code":"import { fork, take, call } from 'redux-saga/effects';\nimport * as taskTypes from './../constants/task';\nimport { getList } from './../apis/task';\nimport { STATUS_CODE } from './../constants';\n\nfunction* watchFetchListTaskAction() {\n  yield take(taskTypes.FETCH_TASK);\n  const resp = yield call(getList);\n  const status = resp.status,\n        data = resp.data;\n\n  if (status === STATUS_CODE.SUCCESS) {//dispatch action fetchListTaskSuccess\n  } else {//dispatch action fetchListTaskSuccess fail\n    }\n}\n\nfunction* watchCreateTaskAction() {\n  console.log('watch create task action');\n}\n\nfunction* rootSaga() {\n  yield fork(watchFetchListTaskAction);\n  yield fork(watchCreateTaskAction);\n}\n\nexport default rootSaga;","map":{"version":3,"sources":["C:\\Coder\\react-nghiepuit\\redux-saga\\redux-saga-material\\src\\sagas\\index.js"],"names":["fork","take","call","taskTypes","getList","STATUS_CODE","watchFetchListTaskAction","FETCH_TASK","resp","status","data","SUCCESS","watchCreateTaskAction","console","log","rootSaga"],"mappings":"AAAA,SAASA,IAAT,EAAeC,IAAf,EAAqBC,IAArB,QAAiC,oBAAjC;AACA,OAAO,KAAKC,SAAZ,MAA2B,qBAA3B;AACA,SAASC,OAAT,QAAwB,gBAAxB;AACA,SAASC,WAAT,QAA4B,gBAA5B;;AAEA,UAAUC,wBAAV,GAAqC;AACjC,QAAML,IAAI,CAACE,SAAS,CAACI,UAAX,CAAV;AACA,QAAMC,IAAI,GAAI,MAAMN,IAAI,CAACE,OAAD,CAAxB;AAFiC,QAGzBK,MAHyB,GAGTD,IAHS,CAGzBC,MAHyB;AAAA,QAGjBC,IAHiB,GAGTF,IAHS,CAGjBE,IAHiB;;AAIjC,MAAGD,MAAM,KAAKJ,WAAW,CAACM,OAA1B,EAAmC,CACnC;AACC,GAFD,MAEO,CACP;AACC;AACJ;;AAED,UAAUC,qBAAV,GAAkC;AAC9BC,EAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACH;;AAED,UAAUC,QAAV,GAAqB;AACjB,QAAMf,IAAI,CAACM,wBAAD,CAAV;AACA,QAAMN,IAAI,CAACY,qBAAD,CAAV;AACH;;AAED,eAAeG,QAAf","sourcesContent":["import { fork, take, call } from 'redux-saga/effects';\r\nimport * as taskTypes from './../constants/task';\r\nimport { getList } from './../apis/task';\r\nimport { STATUS_CODE } from './../constants';\r\n\r\nfunction* watchFetchListTaskAction() {\r\n    yield take(taskTypes.FETCH_TASK);\r\n    const resp  = yield call(getList);\r\n    const { status, data} = resp;\r\n    if(status === STATUS_CODE.SUCCESS) {\r\n    //dispatch action fetchListTaskSuccess\r\n    } else {\r\n    //dispatch action fetchListTaskSuccess fail\r\n    }\r\n}\r\n\r\nfunction* watchCreateTaskAction() {\r\n    console.log('watch create task action')\r\n}\r\n\r\nfunction* rootSaga() {\r\n    yield fork(watchFetchListTaskAction);\r\n    yield fork(watchCreateTaskAction);\r\n}\r\n\r\nexport default rootSaga;"]},"metadata":{},"sourceType":"module"}